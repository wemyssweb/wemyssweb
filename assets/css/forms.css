/*
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
*/
/* 
    Created on : 22 Aug 2019, 18:37:54
    Author     : dalee
*/

/*
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
*/
/* 
    Created on : 29 Jul 2019, 19:46:07
    Author     : dalee
*/
@supports(-webkit-appearance: none) {
/* 	AKA, only do this if `-webkit-appearance: none` is supported. 
	Which means IE11 and Opera Mini will get the old browser-styled checkbox. 
	Which works just fine. Old browsers can get old looking things. */
 	input[type="checkbox"] {
		/*  Remove the default styling.
		    `-webkit-appearance` is not an official CSS property 
			& likely never will be. But it's also in 95% of browsers, 
			non-webkit included, yes, as a `-webkit` property. 
			Firefox, Edge, Chrome, Opera all implemented `-webkit-appearance`.  
			Plus it *will* stick around. Browsers can't remove it. 
			So use it like this...                                 */
		-webkit-appearance: none;
		/* Style the box. */
		width: 1.6rem;
		height: 1.6rem;
		border: 1px solid #808080;
	}
	input[type="checkbox"]:focus {
		/* Style the box when it's focused. */
		border: 1px solid #005200;
	}
 	input[type="checkbox"]:checked {
		/* Prepare for placing the new checkmark. */
		position: relative;
		/* Do a bug fix to keep iOS from adding dark background. */
		background: none;
	}
	input[id="checkbox"]:checked::after {
		/* Place (position) the new checkmark. */
		position: absolute;
		top: 0.36rem; 
		left: 0.12rem;
		/*  Create a checkmark in CSS. 
			Could use an SVG or `content: "✓";` instead. 
			This is a box, turned 45 degs, with a 
			left and bottom border to make the checkmark.
			Created using an empty pseudo-element.*/
		content: "";
		width: 1.0rem;
		height: 0.3rem;
		border: 4px solid #222;
		border-right: none;
		border-top: none;
		-webkit-transform: rotate(-45deg);
		        transform: rotate(-45deg);
	}
        input[type="radio"] , 
	fieldset input[type="radio"] {
		/*  Remove the default styling.
		    `-webkit-appearance` is not an official CSS property 
			& likely never will be. But it's also in 95% of browsers, 
			non-webkit included, yes, as a `-webkit` property. 
			Firefox, Edge, Chrome, Opera all implemented `-webkit-appearance`.  
			Plus it *will* stick around. Browsers can't remove it. 
			So use it like this...                                 */
		-webkit-appearance: none;
		/* Style the radio button container. */
		width: 1.4rem;
		height: 1.4rem;
		border-radius: 50%;
		border: 1px solid #808080;
		margin: 0.3rem 0 0 0;
		padding: 0;
	}
	input[type="radio"]:checked, 
	fieldset input[type="radio"]:checked {
		/* Prepare for placing the new checkmark. */
		position: relative;
		/* Do a bug fix to keep iOS from adding dark background. */
		background: none;
	}
	input[id="radio"]:checked::after, 
	fieldset input[type="radio"]:checked::after {
		/* Place (position) the new “filled-in” blob. */
		position: absolute;
		top: 0.3rem;
		left: 0.3rem;
		width: 0.7rem;
		height: 0.7rem;
		background: #005200;
		border-radius: 50%;
		content: "";
	}
	
	/* Focus styles. */
	fieldset:focus-within  {
		border-color: #005200;
	}
	fieldset:focus-within legend {
		color: #005200;
	}
 	input[type="radio"]:focus, 
	fieldset input[type="radio"]:focus {
		border: 1px solid #005200;
	}

	/* Layout for the Fieldset. Needs work. To be continued... */
	fieldset {
		display: grid;
		grid-template-columns: -webkit-min-content 1fr;
		grid-template-columns: min-content 1fr;
		margin: 3rem 0;
		border: 1px solid #808080;
		grid-column: 2;
		min-width: 12rem; /* this is a hack. hmmf. */
	}
	legend {
		margin: 0 0 0.5rem -1rem;
		padding: 0.6rem 0.5rem 0.4rem 0.8rem;	
		color: black;
		background: #eee;
		width: -webkit-fit-content;
		width: -moz-fit-content;
		width: fit-content;
	}			
	
}
label {
	display: block;
        padding: 0.25rem 0;
}
input{
    border: 1px solid grey;
}
input:focus{
    border: 1px solid #005200;
  box-shadow: 0px 0px 3px #005200;
  outline: 0; /* remove blue fuzzy outline from Webkit and Chromium. I'm replacing it with custom focus styling, so it's ok. */
}
textarea {
  padding: 0 1rem;  
  
  display: block;
  width: 100%;
  	/* If you apply min-width and max-width, you can keep the box from being resized in the horizontal direction by the user. Pretty cool. */
	min-width: 100%;
	max-width: 100%; 
  height: 20em;
  
  /* I want this to make the box grow as content is added, like the JS thing some use. But it doesn't do that. Hmmf. Needs more investigation into how the inner boxes and overflow interact.... scrollable area... having flashbacks to recent CSSWG #hottopicdiscussions about padding inside a scrollable textarea */
  min-height: -webkit-max-content;
  min-height: -moz-max-content;
  min-height: max-content;
}
textarea:focus {
  border: 1px solid #005200;
  box-shadow: 0px 0px 3px #005200;
  outline: 0; /* remove blue fuzzy outline from Webkit and Chromium. I'm replacing it with custom focus styling, so it's ok. */
}
div:focus-within label {
	color: #005200;
}
form{
    display: block;
}
input[type="text"],input[type="email"]{
    width: 100%;
}
input,textarea{
    padding:.5rem;
    box-sizing:border-box;
}
#submit {
  font-weight:bold;
  margin-top:1rem;  
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  outline: none;
  color: #222;
  background-color: #fff;
  border:#3e8e41  2px solid;
  border-radius: 15px;
  box-shadow: 0 0 5px #222;
}

#submit:hover {background-color: #ccff33;}

#submit:active { 
  box-shadow: 0 0 5px #005200,0 0 10px #3e8e41,0 0 15px #ccff33;
}
